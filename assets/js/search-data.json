{
  
    
        "post0": {
            "title": "Check all borough dataframes",
            "content": "#import libraries #numerical import pandas as pd import numpy as np from empiricaldist import Cdf,Pmf #plotting import matplotlib.pyplot as plt import seaborn as sns #For mapping import contextily as ctx import geopandas as gpd import geoplot import shapely from shapely.geometry import MultiPoint from geopandas.tools import overlay . !ls . glossary.pdf nyc-rolling-data.csv rollingsales_manhattan.xls LICENSE README.md rollingsales_queens.xls NYC_EDA.ipynb rollingsales_bronx.xls rollingsales_statenisland.xls NYC.png rollingsales_brooklyn.xls ZIP_CODE_040114 . df_manhattan =pd.read_excel(&#39;rollingsales_manhattan.xls&#39;) df_bronx = pd.read_excel(&#39;rollingsales_bronx.xls&#39;) df_brooklyn = pd.read_excel(&#39;rollingsales_brooklyn.xls&#39;) df_queens = pd.read_excel(&#39;rollingsales_queens.xls&#39;) df_staten = pd.read_excel(&#39;rollingsales_statenisland.xls&#39;) . df_manhattan.head() . Manhattan Rolling Sales File. All Sales From April 2019 - March 2020. Unnamed: 1 Unnamed: 2 Unnamed: 3 Unnamed: 4 Unnamed: 5 Unnamed: 6 Unnamed: 7 Unnamed: 8 Unnamed: 9 ... Unnamed: 11 Unnamed: 12 Unnamed: 13 Unnamed: 14 Unnamed: 15 Unnamed: 16 Unnamed: 17 Unnamed: 18 PTS Sales as of 04/15/2020 Unnamed: 20 . 0 For sales prior to the Final, Neighborhood Nam... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 1 Building Class Category is based on Building C... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 2 Note: Condominium and cooperative sales are on... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 3 BOROUGH | NEIGHBORHOOD | BUILDING CLASS CATEGORY | TAX CLASS AT PRESENT | BLOCK | LOT | EASE-MENT | BUILDING CLASS AT PRESENT | ADDRESS | APARTMENT NUMBER | ... | RESIDENTIAL UNITS | COMMERCIAL UNITS | TOTAL UNITS | LAND SQUARE FEET | GROSS SQUARE FEET | YEAR BUILT | TAX CLASS AT TIME OF SALE | BUILDING CLASS AT TIME OF SALE | SALE PRICE | SALE DATE | . 4 1 | ALPHABET CITY | 01 ONE FAMILY DWELLINGS | 1 | 376 | 43 | NaN | S1 | 743 EAST 6TH STREET | NaN | ... | 1 | 1 | 2 | 2090 | 3680 | 1940 | 1 | S1 | 3200000 | 2019-07-24 00:00:00 | . 5 rows × 21 columns . df_bronx.head() . Bronx Rolling Sales File. All Sales From April 2019 - March 2020. Unnamed: 1 Unnamed: 2 Unnamed: 3 Unnamed: 4 Unnamed: 5 Unnamed: 6 Unnamed: 7 Unnamed: 8 Unnamed: 9 ... Unnamed: 11 Unnamed: 12 Unnamed: 13 Unnamed: 14 Unnamed: 15 Unnamed: 16 Unnamed: 17 Unnamed: 18 PTS Sales as of 04/15/2020 Unnamed: 20 . 0 For sales prior to the Final, Neighborhood Nam... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 1 Building Class Category is based on Building C... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 2 Note: Condominium and cooperative sales are on... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 3 BOROUGH | NEIGHBORHOOD | BUILDING CLASS CATEGORY | TAX CLASS AT PRESENT | BLOCK | LOT | EASE-MENT | BUILDING CLASS AT PRESENT | ADDRESS | APARTMENT NUMBER | ... | RESIDENTIAL UNITS | COMMERCIAL UNITS | TOTAL UNITS | LAND SQUARE FEET | GROSS SQUARE FEET | YEAR BUILT | TAX CLASS AT TIME OF SALE | BUILDING CLASS AT TIME OF SALE | SALE PRICE | SALE DATE | . 4 2 | BATHGATE | 01 ONE FAMILY DWELLINGS | 1 | 3030 | 65 | NaN | A1 | 4455 PARK AVENUE | NaN | ... | 1 | 0 | 1 | 1622 | 1587 | 1899 | 1 | A1 | 458000 | 2020-01-31 00:00:00 | . 5 rows × 21 columns . df_brooklyn.head() . Brooklyn Rolling Sales File. All Sales From April 2019 - March 2020 Unnamed: 1 Unnamed: 2 Unnamed: 3 Unnamed: 4 Unnamed: 5 Unnamed: 6 Unnamed: 7 Unnamed: 8 Unnamed: 9 ... Unnamed: 11 Unnamed: 12 Unnamed: 13 Unnamed: 14 Unnamed: 15 Unnamed: 16 Unnamed: 17 Unnamed: 18 PTS Sales as of 04/15/2020 Unnamed: 20 . 0 For sales prior to the Final, Neighborhood Nam... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 1 Building Class Category is based on Building C... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 2 Note: Condominium and cooperative sales are on... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 3 BOROUGH | NEIGHBORHOOD | BUILDING CLASS CATEGORY | TAX CLASS AT PRESENT | BLOCK | LOT | EASE-MENT | BUILDING CLASS AT PRESENT | ADDRESS | APARTMENT NUMBER | ... | RESIDENTIAL UNITS | COMMERCIAL UNITS | TOTAL UNITS | LAND SQUARE FEET | GROSS SQUARE FEET | YEAR BUILT | TAX CLASS AT TIME OF SALE | BUILDING CLASS AT TIME OF SALE | SALE PRICE | SALE DATE | . 4 3 | BATH BEACH | 01 ONE FAMILY DWELLINGS | 1 | 6360 | 48 | NaN | A5 | 14 BAY 10TH STREET | NaN | ... | 1 | 0 | 1 | 2513 | 1428 | 1930 | 1 | A5 | 849000 | 2020-03-18 00:00:00 | . 5 rows × 21 columns . df_queens.head() . Queens Rolling Sales File. All Sales From April 2019 - March 2020 Unnamed: 1 Unnamed: 2 Unnamed: 3 Unnamed: 4 Unnamed: 5 Unnamed: 6 Unnamed: 7 Unnamed: 8 Unnamed: 9 ... Unnamed: 11 Unnamed: 12 Unnamed: 13 Unnamed: 14 Unnamed: 15 Unnamed: 16 Unnamed: 17 Unnamed: 18 PTS Sales as of 04/15/2020 Unnamed: 20 . 0 For sales prior to the Final, Neighborhood Nam... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 1 Building Class Category is based on Building C... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 2 Note: Condominium and cooperative sales are on... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 3 BOROUGH | NEIGHBORHOOD | BUILDING CLASS CATEGORY | TAX CLASS AT PRESENT | BLOCK | LOT | EASE-MENT | BUILDING CLASS AT PRESENT | ADDRESS | APARTMENT NUMBER | ... | RESIDENTIAL UNITS | COMMERCIAL UNITS | TOTAL UNITS | LAND SQUARE FEET | GROSS SQUARE FEET | YEAR BUILT | TAX CLASS AT TIME OF SALE | BUILDING CLASS AT TIME OF SALE | SALE PRICE | SALE DATE | . 4 4 | AIRPORT LA GUARDIA | 01 ONE FAMILY DWELLINGS | 1 | 949 | 31 | NaN | A5 | 1942 81ST STREET | NaN | ... | 1 | 0 | 1 | 1800 | 1224 | 1945 | 1 | A5 | 775000 | 2019-04-05 00:00:00 | . 5 rows × 21 columns . df_staten.head() . Staten Island Rolling Sales File. All Sales From April 2019 - March 2020 Unnamed: 1 Unnamed: 2 Unnamed: 3 Unnamed: 4 Unnamed: 5 Unnamed: 6 Unnamed: 7 Unnamed: 8 Unnamed: 9 ... Unnamed: 11 Unnamed: 12 Unnamed: 13 Unnamed: 14 Unnamed: 15 Unnamed: 16 Unnamed: 17 Unnamed: 18 PTS Sales as of 04/15/2020 Unnamed: 20 . 0 For sales prior to the Final, Neighborhood Nam... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 1 Building Class Category is based on Building C... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 2 Note: Condominium and cooperative sales are on... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 3 BOROUGH | NEIGHBORHOOD | BUILDING CLASS CATEGORY | TAX CLASS AT PRESENT | BLOCK | LOT | EASE-MENT | BUILDING CLASS AT PRESENT | ADDRESS | APARTMENT NUMBER | ... | RESIDENTIAL UNITS | COMMERCIAL UNITS | TOTAL UNITS | LAND SQUARE FEET | GROSS SQUARE FEET | YEAR BUILT | TAX CLASS AT TIME OF SALE | BUILDING CLASS AT TIME OF SALE | SALE PRICE | SALE DATE | . 4 5 | ANNADALE | 01 ONE FAMILY DWELLINGS | 1 | 5391 | 13 | NaN | A5 | 4716 AMBOY ROAD | NaN | ... | 1 | 0 | 1 | 1871 | 910 | 2002 | 1 | A5 | 0 | 2019-07-10 00:00:00 | . 5 rows × 21 columns . frames = [df_manhattan,df_bronx,df_brooklyn,df_queens,df_staten] . #Change column names to row 4 and then delete first 4 rows for frame in frames: columns = [] for item in frame.iloc[3]: columns.append(item) # delete rows 0-3 frame.columns=columns frame.drop([0,1,2,3], axis=0, inplace=True) . # to confrim that rows have been deleted and columns renamed for frame in frames: print(frame.head()) . BOROUGH NEIGHBORHOOD BUILDING CLASS CATEGORY TAX CLASS AT PRESENT 4 1 ALPHABET CITY 01 ONE FAMILY DWELLINGS 1 5 1 ALPHABET CITY 01 ONE FAMILY DWELLINGS 1 6 1 ALPHABET CITY 02 TWO FAMILY DWELLINGS 1 7 1 ALPHABET CITY 03 THREE FAMILY DWELLINGS 1 8 1 ALPHABET CITY 03 THREE FAMILY DWELLINGS 1 BLOCK LOT EASE-MENT BUILDING CLASS AT PRESENT ADDRESS 4 376 43 NaN S1 743 EAST 6TH STREET 5 390 61 NaN A4 189 EAST 7TH STREET 6 404 1 NaN B9 166 AVENUE A 7 377 56 NaN C0 263 EAST 7TH STREET 8 393 9 NaN C0 604 EAST 11TH STREET APARTMENT NUMBER ... RESIDENTIAL UNITS COMMERCIAL UNITS TOTAL UNITS 4 NaN ... 1 1 2 5 NaN ... 1 0 1 6 NaN ... 2 0 2 7 NaN ... 3 0 3 8 NaN ... 3 0 3 LAND SQUARE FEET GROSS SQUARE FEET YEAR BUILT TAX CLASS AT TIME OF SALE 4 2090 3680 1940 1 5 987 2183 1860 1 6 1510 4520 1900 1 7 2430 3600 1899 1 8 2375 5110 1939 1 BUILDING CLASS AT TIME OF SALE SALE PRICE SALE DATE 4 S1 3200000 2019-07-24 00:00:00 5 A4 0 2019-09-25 00:00:00 6 B9 0 2019-07-22 00:00:00 7 C0 6300000 2019-04-30 00:00:00 8 C0 0 2019-10-24 00:00:00 [5 rows x 21 columns] BOROUGH NEIGHBORHOOD BUILDING CLASS CATEGORY TAX CLASS AT PRESENT BLOCK 4 2 BATHGATE 01 ONE FAMILY DWELLINGS 1 3030 5 2 BATHGATE 01 ONE FAMILY DWELLINGS 1 3030 6 2 BATHGATE 01 ONE FAMILY DWELLINGS 1 3030 7 2 BATHGATE 01 ONE FAMILY DWELLINGS 1 3039 8 2 BATHGATE 01 ONE FAMILY DWELLINGS 1 3039 LOT EASE-MENT BUILDING CLASS AT PRESENT ADDRESS 4 65 NaN A1 4455 PARK AVENUE 5 67 NaN A1 4451 PARK AVENUE 6 70 NaN A1 4445 PARK AVENUE 7 29 NaN A9 2327 WASHINGTON AVENUE 8 29 NaN A9 2327 WASHINGTON AVE APARTMENT NUMBER ... RESIDENTIAL UNITS COMMERCIAL UNITS TOTAL UNITS 4 NaN ... 1 0 1 5 NaN ... 1 0 1 6 NaN ... 1 0 1 7 NaN ... 1 0 1 8 NaN ... 1 0 1 LAND SQUARE FEET GROSS SQUARE FEET YEAR BUILT TAX CLASS AT TIME OF SALE 4 1622 1587 1899 1 5 1646 1495 1899 1 6 1694 1497 1899 1 7 1095 1260 1910 1 8 1095 1260 1910 1 BUILDING CLASS AT TIME OF SALE SALE PRICE SALE DATE 4 A1 458000 2020-01-31 00:00:00 5 A1 275000 2020-03-16 00:00:00 6 A1 388500 2019-07-23 00:00:00 7 A9 110000 2019-12-06 00:00:00 8 A9 165000 2020-03-02 00:00:00 [5 rows x 21 columns] BOROUGH NEIGHBORHOOD BUILDING CLASS CATEGORY TAX CLASS AT PRESENT BLOCK 4 3 BATH BEACH 01 ONE FAMILY DWELLINGS 1 6360 5 3 BATH BEACH 01 ONE FAMILY DWELLINGS 1 6363 6 3 BATH BEACH 01 ONE FAMILY DWELLINGS 1 6364 7 3 BATH BEACH 01 ONE FAMILY DWELLINGS 1 6370 8 3 BATH BEACH 01 ONE FAMILY DWELLINGS 1 6370 LOT EASE-MENT BUILDING CLASS AT PRESENT ADDRESS 4 48 NaN A5 14 BAY 10TH STREET 5 22 NaN A9 8645 16TH AVENUE 6 74 NaN A5 72 BAY 14TH STREET 7 66 NaN A9 28 BAY 20TH STREET 8 66 NaN A9 28 BAY 20TH STREET APARTMENT NUMBER ... RESIDENTIAL UNITS COMMERCIAL UNITS TOTAL UNITS 4 NaN ... 1 0 1 5 NaN ... 1 0 1 6 NaN ... 1 0 1 7 NaN ... 1 0 1 8 NaN ... 1 0 1 LAND SQUARE FEET GROSS SQUARE FEET YEAR BUILT TAX CLASS AT TIME OF SALE 4 2513 1428 1930 1 5 2058 1492 1930 1 6 2492 972 1950 1 7 2417 1584 1930 1 8 2417 1584 1930 1 BUILDING CLASS AT TIME OF SALE SALE PRICE SALE DATE 4 A5 849000 2020-03-18 00:00:00 5 A9 0 2019-04-23 00:00:00 6 A5 0 2019-08-15 00:00:00 7 A9 0 2019-06-18 00:00:00 8 A9 0 2019-06-11 00:00:00 [5 rows x 21 columns] BOROUGH NEIGHBORHOOD BUILDING CLASS CATEGORY TAX CLASS AT PRESENT 4 4 AIRPORT LA GUARDIA 01 ONE FAMILY DWELLINGS 1 5 4 AIRPORT LA GUARDIA 01 ONE FAMILY DWELLINGS 1 6 4 AIRPORT LA GUARDIA 01 ONE FAMILY DWELLINGS 1 7 4 AIRPORT LA GUARDIA 01 ONE FAMILY DWELLINGS 1 8 4 AIRPORT LA GUARDIA 01 ONE FAMILY DWELLINGS 1 BLOCK LOT EASE-MENT BUILDING CLASS AT PRESENT ADDRESS 4 949 31 NaN A5 1942 81ST STREET 5 949 38 NaN A5 19-56 81ST STREET 6 949 41 NaN A5 1962 81ST STREET 7 949 41 NaN A5 1962 81ST ST 8 976 12 NaN A5 2114 81 STREET APARTMENT NUMBER ... RESIDENTIAL UNITS COMMERCIAL UNITS TOTAL UNITS 4 NaN ... 1 0 1 5 NaN ... 1 0 1 6 NaN ... 1 0 1 7 NaN ... 1 0 1 8 NaN ... 1 0 1 LAND SQUARE FEET GROSS SQUARE FEET YEAR BUILT TAX CLASS AT TIME OF SALE 4 1800 1224 1945 1 5 1800 1224 1945 1 6 1800 1224 1945 1 7 1800 1224 1945 1 8 1800 1224 1950 1 BUILDING CLASS AT TIME OF SALE SALE PRICE SALE DATE 4 A5 775000 2019-04-05 00:00:00 5 A5 0 2019-06-18 00:00:00 6 A5 0 2019-11-21 00:00:00 7 A5 0 2019-11-12 00:00:00 8 A5 0 2019-04-24 00:00:00 [5 rows x 21 columns] BOROUGH NEIGHBORHOOD BUILDING CLASS CATEGORY TAX CLASS AT PRESENT BLOCK 4 5 ANNADALE 01 ONE FAMILY DWELLINGS 1 5391 5 5 ANNADALE 01 ONE FAMILY DWELLINGS 1 5395 6 5 ANNADALE 01 ONE FAMILY DWELLINGS 1 5398 7 5 ANNADALE 01 ONE FAMILY DWELLINGS 1 5399 8 5 ANNADALE 01 ONE FAMILY DWELLINGS 1 5407 LOT EASE-MENT BUILDING CLASS AT PRESENT ADDRESS 4 13 NaN A5 4716 AMBOY ROAD 5 23 NaN A1 525 SYCAMORE STREET 6 20 NaN A1 1468 ARDEN AVENUE 7 33 NaN A2 247 KOCH BOULEVARD 8 39 NaN B2 193 BATHGATE STREET APARTMENT NUMBER ... RESIDENTIAL UNITS COMMERCIAL UNITS TOTAL UNITS 4 NaN ... 1 0 1 5 NaN ... 1 0 1 6 NaN ... 1 0 1 7 NaN ... 1 0 1 8 NaN ... 2 0 2 LAND SQUARE FEET GROSS SQUARE FEET YEAR BUILT TAX CLASS AT TIME OF SALE 4 1871 910 2002 1 5 10000 2848 1980 1 6 5000 2200 1940 1 7 7035 1528 1970 1 8 5000 2800 2018 1 BUILDING CLASS AT TIME OF SALE SALE PRICE SALE DATE 4 A5 0 2019-07-10 00:00:00 5 A1 775000 2019-12-13 00:00:00 6 A1 685000 2019-04-15 00:00:00 7 A2 0 2019-08-07 00:00:00 8 A2 1221900 2019-05-09 00:00:00 [5 rows x 21 columns] . # Join all dataframes together df = pd.concat(frames) . len(df) . 81484 . # to confirm that all the records are in the new dataframe length=0 for frame in frames: length+= len(frame) print(length) . 81484 . # All files added can be output to a csv file #df.to_csv(&#39;nyc-rolling-data.csv&#39;, index=False) df = pd.read_csv(&#39;nyc-rolling-data.csv&#39;) . df.head() . BOROUGH NEIGHBORHOOD BUILDING CLASS CATEGORY TAX CLASS AT PRESENT BLOCK LOT EASE-MENT BUILDING CLASS AT PRESENT ADDRESS APARTMENT NUMBER ... RESIDENTIAL UNITS COMMERCIAL UNITS TOTAL UNITS LAND SQUARE FEET GROSS SQUARE FEET YEAR BUILT TAX CLASS AT TIME OF SALE BUILDING CLASS AT TIME OF SALE SALE PRICE SALE DATE . 0 1 | ALPHABET CITY | 01 ONE FAMILY DWELLINGS | 1 | 376 | 43 | NaN | S1 | 743 EAST 6TH STREET | NaN | ... | 1.0 | 1.0 | 2.0 | 2090.0 | 3680.0 | 1940.0 | 1 | S1 | 3200000 | 2019-07-24 00:00:00 | . 1 1 | ALPHABET CITY | 01 ONE FAMILY DWELLINGS | 1 | 390 | 61 | NaN | A4 | 189 EAST 7TH STREET | NaN | ... | 1.0 | 0.0 | 1.0 | 987.0 | 2183.0 | 1860.0 | 1 | A4 | 0 | 2019-09-25 00:00:00 | . 2 1 | ALPHABET CITY | 02 TWO FAMILY DWELLINGS | 1 | 404 | 1 | NaN | B9 | 166 AVENUE A | NaN | ... | 2.0 | 0.0 | 2.0 | 1510.0 | 4520.0 | 1900.0 | 1 | B9 | 0 | 2019-07-22 00:00:00 | . 3 1 | ALPHABET CITY | 03 THREE FAMILY DWELLINGS | 1 | 377 | 56 | NaN | C0 | 263 EAST 7TH STREET | NaN | ... | 3.0 | 0.0 | 3.0 | 2430.0 | 3600.0 | 1899.0 | 1 | C0 | 6300000 | 2019-04-30 00:00:00 | . 4 1 | ALPHABET CITY | 03 THREE FAMILY DWELLINGS | 1 | 393 | 9 | NaN | C0 | 604 EAST 11TH STREET | NaN | ... | 3.0 | 0.0 | 3.0 | 2375.0 | 5110.0 | 1939.0 | 1 | C0 | 0 | 2019-10-24 00:00:00 | . 5 rows × 21 columns . df.columns . Index([&#39;BOROUGH&#39;, &#39;NEIGHBORHOOD&#39;, &#39;BUILDING CLASS CATEGORY&#39;, &#39;TAX CLASS AT PRESENT&#39;, &#39;BLOCK&#39;, &#39;LOT&#39;, &#39;EASE-MENT&#39;, &#39;BUILDING CLASS AT PRESENT&#39;, &#39;ADDRESS&#39;, &#39;APARTMENT NUMBER&#39;, &#39;ZIP CODE&#39;, &#39;RESIDENTIAL UNITS&#39;, &#39;COMMERCIAL UNITS&#39;, &#39;TOTAL UNITS&#39;, &#39;LAND SQUARE FEET&#39;, &#39;GROSS SQUARE FEET&#39;, &#39;YEAR BUILT&#39;, &#39;TAX CLASS AT TIME OF SALE&#39;, &#39;BUILDING CLASS AT TIME OF SALE&#39;, &#39;SALE PRICE&#39;, &#39;SALE DATE&#39;], dtype=&#39;object&#39;) . df.describe() . BOROUGH BLOCK LOT EASE-MENT ZIP CODE RESIDENTIAL UNITS COMMERCIAL UNITS TOTAL UNITS LAND SQUARE FEET GROSS SQUARE FEET YEAR BUILT TAX CLASS AT TIME OF SALE SALE PRICE . count 81484.000000 | 81484.000000 | 81484.000000 | 0.0 | 81471.000000 | 64556.000000 | 64556.000000 | 64556.000000 | 6.455600e+04 | 6.455600e+04 | 75466.000000 | 81484.000000 | 8.148400e+04 | . mean 2.982843 | 4399.424390 | 359.265574 | NaN | 10855.408624 | 2.370004 | 0.359099 | 2.729103 | 6.055451e+03 | 4.191151e+03 | 1950.610407 | 1.621410 | 1.515302e+06 | . std 1.282482 | 3668.023018 | 651.796121 | NaN | 562.482018 | 35.965798 | 6.649820 | 36.769705 | 1.492579e+05 | 5.235966e+04 | 35.083675 | 0.793135 | 1.355213e+07 | . min 1.000000 | 1.000000 | 1.000000 | NaN | 10001.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000e+00 | 0.000000e+00 | 1018.000000 | 1.000000 | 0.000000e+00 | . 25% 2.000000 | 1348.000000 | 22.000000 | NaN | 10306.000000 | 1.000000 | 0.000000 | 1.000000 | 0.000000e+00 | 0.000000e+00 | 1925.000000 | 1.000000 | 0.000000e+00 | . 50% 3.000000 | 3537.000000 | 50.000000 | NaN | 11209.000000 | 1.000000 | 0.000000 | 1.000000 | 2.042000e+03 | 1.478000e+03 | 1945.000000 | 1.000000 | 4.775000e+05 | . 75% 4.000000 | 6540.000000 | 360.000000 | NaN | 11358.000000 | 2.000000 | 0.000000 | 2.000000 | 3.125000e+03 | 2.372000e+03 | 1970.000000 | 2.000000 | 9.000000e+05 | . max 5.000000 | 16350.000000 | 9116.000000 | NaN | 11697.000000 | 8764.000000 | 842.000000 | 8812.000000 | 1.985040e+07 | 8.942176e+06 | 2020.000000 | 4.000000 | 2.155000e+09 | . Some properties have a land square feet and or a gross square feet of 0 . This should be wrong . df[df[&#39;LAND SQUARE FEET&#39;] == 0] . BOROUGH NEIGHBORHOOD BUILDING CLASS CATEGORY TAX CLASS AT PRESENT BLOCK LOT EASE-MENT BUILDING CLASS AT PRESENT ADDRESS APARTMENT NUMBER ... RESIDENTIAL UNITS COMMERCIAL UNITS TOTAL UNITS LAND SQUARE FEET GROSS SQUARE FEET YEAR BUILT TAX CLASS AT TIME OF SALE BUILDING CLASS AT TIME OF SALE SALE PRICE SALE DATE . 104 1 | ALPHABET CITY | 11 SPECIAL CONDO BILLING LOTS | 4 | 377 | 1204 | NaN | RK | 101 AVENUE D, B-1 | B-1 | ... | 0.0 | 1.0 | 1.0 | 0.0 | 0.0 | 2010.0 | 2 | RR | 5100000 | 2019-12-13 00:00:00 | . 105 1 | ALPHABET CITY | 12 CONDOS - WALKUP APARTMENTS | 2 | 393 | 1007 | NaN | R2 | 642-646 EAST 11TH STREET, C2 | C2 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 0.0 | NaN | 2 | R2 | 0 | 2019-12-02 00:00:00 | . 106 1 | ALPHABET CITY | 12 CONDOS - WALKUP APARTMENTS | 2 | 393 | 1030 | NaN | R2 | 383 E 10TH STREET, B4 | B4 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 0.0 | NaN | 2 | R2 | 1190000 | 2020-03-16 00:00:00 | . 107 1 | ALPHABET CITY | 12 CONDOS - WALKUP APARTMENTS | 2 | 398 | 1020 | NaN | R2 | 182 EAST 2ND STREET, 3F | 3F | ... | 1.0 | 0.0 | 1.0 | 0.0 | 0.0 | NaN | 2 | R2 | 0 | 2019-07-12 00:00:00 | . 108 1 | ALPHABET CITY | 13 CONDOS - ELEVATOR APARTMENTS | 2 | 373 | 1007 | NaN | R4 | 324 EAST 4TH STREET, 5A | 5A | ... | 1.0 | 0.0 | 1.0 | 0.0 | 0.0 | 1920.0 | 2 | R4 | 825000 | 2020-03-05 00:00:00 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 81356 5 | WOODROW | 01 ONE FAMILY DWELLINGS | 1 | 7094 | 54 | NaN | A5 | 56 BERKSHIRE LANE | NaN | ... | 1.0 | 0.0 | 1.0 | 0.0 | 0.0 | 2017.0 | 1 | A5 | 733140 | 2019-04-11 00:00:00 | . 81360 5 | WOODROW | 01 ONE FAMILY DWELLINGS | 1 | 7105 | 149 | NaN | A5 | 14 APRICOT COURT | NaN | ... | 1.0 | 0.0 | 1.0 | 0.0 | 0.0 | 2017.0 | 1 | A5 | 671454 | 2019-04-12 00:00:00 | . 81446 5 | WOODROW | 02 TWO FAMILY DWELLINGS | 1 | 7094 | 40 | NaN | B9 | 79 BERKSHIRE LANE | NaN | ... | 2.0 | 0.0 | 2.0 | 0.0 | 0.0 | 2017.0 | 1 | B9 | 152100 | 2019-04-15 00:00:00 | . 81480 5 | WOODROW | 05 TAX CLASS 1 VACANT LAND | 1 | 7094 | 48 | NaN | B9 | 108 BERKSHIRE LANE | NaN | ... | 2.0 | 0.0 | 2.0 | 0.0 | 0.0 | 2018.0 | 1 | V0 | 599701 | 2019-04-24 00:00:00 | . 81481 5 | WOODROW | 05 TAX CLASS 1 VACANT LAND | 1 | 7094 | 49 | NaN | B9 | 35 WILTSHIRE LANE | NaN | ... | 2.0 | 0.0 | 2.0 | 0.0 | 0.0 | 2018.0 | 1 | V0 | 896060 | 2019-04-22 00:00:00 | . 17814 rows × 21 columns . df[df[&#39;GROSS SQUARE FEET&#39;] == 0] . BOROUGH NEIGHBORHOOD BUILDING CLASS CATEGORY TAX CLASS AT PRESENT BLOCK LOT EASE-MENT BUILDING CLASS AT PRESENT ADDRESS APARTMENT NUMBER ... RESIDENTIAL UNITS COMMERCIAL UNITS TOTAL UNITS LAND SQUARE FEET GROSS SQUARE FEET YEAR BUILT TAX CLASS AT TIME OF SALE BUILDING CLASS AT TIME OF SALE SALE PRICE SALE DATE . 104 1 | ALPHABET CITY | 11 SPECIAL CONDO BILLING LOTS | 4 | 377 | 1204 | NaN | RK | 101 AVENUE D, B-1 | B-1 | ... | 0.0 | 1.0 | 1.0 | 0.0 | 0.0 | 2010.0 | 2 | RR | 5100000 | 2019-12-13 00:00:00 | . 105 1 | ALPHABET CITY | 12 CONDOS - WALKUP APARTMENTS | 2 | 393 | 1007 | NaN | R2 | 642-646 EAST 11TH STREET, C2 | C2 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 0.0 | NaN | 2 | R2 | 0 | 2019-12-02 00:00:00 | . 106 1 | ALPHABET CITY | 12 CONDOS - WALKUP APARTMENTS | 2 | 393 | 1030 | NaN | R2 | 383 E 10TH STREET, B4 | B4 | ... | 1.0 | 0.0 | 1.0 | 0.0 | 0.0 | NaN | 2 | R2 | 1190000 | 2020-03-16 00:00:00 | . 107 1 | ALPHABET CITY | 12 CONDOS - WALKUP APARTMENTS | 2 | 398 | 1020 | NaN | R2 | 182 EAST 2ND STREET, 3F | 3F | ... | 1.0 | 0.0 | 1.0 | 0.0 | 0.0 | NaN | 2 | R2 | 0 | 2019-07-12 00:00:00 | . 108 1 | ALPHABET CITY | 13 CONDOS - ELEVATOR APARTMENTS | 2 | 373 | 1007 | NaN | R4 | 324 EAST 4TH STREET, 5A | 5A | ... | 1.0 | 0.0 | 1.0 | 0.0 | 0.0 | 1920.0 | 2 | R4 | 825000 | 2020-03-05 00:00:00 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 81446 5 | WOODROW | 02 TWO FAMILY DWELLINGS | 1 | 7094 | 40 | NaN | B9 | 79 BERKSHIRE LANE | NaN | ... | 2.0 | 0.0 | 2.0 | 0.0 | 0.0 | 2017.0 | 1 | B9 | 152100 | 2019-04-15 00:00:00 | . 81480 5 | WOODROW | 05 TAX CLASS 1 VACANT LAND | 1 | 7094 | 48 | NaN | B9 | 108 BERKSHIRE LANE | NaN | ... | 2.0 | 0.0 | 2.0 | 0.0 | 0.0 | 2018.0 | 1 | V0 | 599701 | 2019-04-24 00:00:00 | . 81481 5 | WOODROW | 05 TAX CLASS 1 VACANT LAND | 1 | 7094 | 49 | NaN | B9 | 35 WILTSHIRE LANE | NaN | ... | 2.0 | 0.0 | 2.0 | 0.0 | 0.0 | 2018.0 | 1 | V0 | 896060 | 2019-04-22 00:00:00 | . 81482 5 | WOODROW | 05 TAX CLASS 1 VACANT LAND | 1B | 7349 | 28 | NaN | V0 | N/A QUAIL LANE | NaN | ... | 0.0 | 0.0 | 0.0 | 2640.0 | 0.0 | NaN | 1 | V0 | 26000 | 2019-08-22 00:00:00 | . 81483 5 | WOODROW | 06 TAX CLASS 1 - OTHER | 1 | 7267 | 129 | NaN | G0 | 22 CLAY PIT ROAD | NaN | ... | 0.0 | 0.0 | 0.0 | 7920.0 | 0.0 | 2011.0 | 1 | G0 | 0 | 2019-05-22 00:00:00 | . 20008 rows × 21 columns . There does not seem to be a common feature among the properties with reported sizes of 0 for the model I will do one with them included and then with them dropped . df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 81484 entries, 0 to 81483 Data columns (total 21 columns): # Column Non-Null Count Dtype -- -- 0 BOROUGH 81484 non-null int64 1 NEIGHBORHOOD 81484 non-null object 2 BUILDING CLASS CATEGORY 81484 non-null object 3 TAX CLASS AT PRESENT 81258 non-null object 4 BLOCK 81484 non-null int64 5 LOT 81484 non-null int64 6 EASE-MENT 0 non-null float64 7 BUILDING CLASS AT PRESENT 81258 non-null object 8 ADDRESS 81484 non-null object 9 APARTMENT NUMBER 18010 non-null object 10 ZIP CODE 81471 non-null float64 11 RESIDENTIAL UNITS 64556 non-null float64 12 COMMERCIAL UNITS 64556 non-null float64 13 TOTAL UNITS 64556 non-null float64 14 LAND SQUARE FEET 64556 non-null float64 15 GROSS SQUARE FEET 64556 non-null float64 16 YEAR BUILT 75466 non-null float64 17 TAX CLASS AT TIME OF SALE 81484 non-null int64 18 BUILDING CLASS AT TIME OF SALE 81484 non-null object 19 SALE PRICE 81484 non-null int64 20 SALE DATE 81484 non-null object dtypes: float64(8), int64(5), object(8) memory usage: 13.1+ MB . # Percentage of null values in each columns 100*df.isnull().sum()/len(df) . BOROUGH 0.000000 NEIGHBORHOOD 0.000000 BUILDING CLASS CATEGORY 0.000000 TAX CLASS AT PRESENT 0.277355 BLOCK 0.000000 LOT 0.000000 EASE-MENT 100.000000 BUILDING CLASS AT PRESENT 0.277355 ADDRESS 0.000000 APARTMENT NUMBER 77.897501 ZIP CODE 0.015954 RESIDENTIAL UNITS 20.774631 COMMERCIAL UNITS 20.774631 TOTAL UNITS 20.774631 LAND SQUARE FEET 20.774631 GROSS SQUARE FEET 20.774631 YEAR BUILT 7.385499 TAX CLASS AT TIME OF SALE 0.000000 BUILDING CLASS AT TIME OF SALE 0.000000 SALE PRICE 0.000000 SALE DATE 0.000000 dtype: float64 . #A $0 sale indicates that there was a transfer of ownership without a cash consideration. 100*len(df[df[&#39;SALE PRICE&#39;] == 0])/len(df) . 30.365470521820235 . ~30.37% of properties transfered without a cash consideration . Since the purpose is to predict the sale price these can be taken out it might be interesting to see if there are any similarities or differences between properties that are transfered without a cash consideration . # Since the first two characters of the building class are digits it is possible to parse them and change the #type to a number type df[&#39;BUILDING CLASS CATEGORY&#39;]=df[&#39;BUILDING CLASS CATEGORY&#39;].str[0:2] df[&#39;BUILDING CLASS CATEGORY&#39;].astype(int) # EASE-MENT has 100% NaN values APARTMENT has &gt;70% NaN so they will be dropped # Address is too unique df.drop(columns=[&#39;EASE-MENT&#39;,&#39;APARTMENT NUMBER&#39;,&#39;ADDRESS&#39;], inplace=True) . plt.hist(df.BOROUGH,bins=4,histtype=&#39;step&#39;) plt.title(&#39;Histogram of number of properties transfered in each borough&#39;) plt.show() . df[&#39;AGE OF BUILDING&#39;] = 2020 -df[&#39;YEAR BUILT&#39;] . plt.hist(df[&#39;BLOCK&#39;],bins=40,histtype=&#39;step&#39;) plt.show() . df[&#39;AGE OF BUILDING&#39;].hist(bins=100,histtype=&#39;step&#39;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fd91a94b550&gt; . df_nosale=df[df[&#39;SALE PRICE&#39;] == 0] df = df[df[&#39;SALE PRICE&#39;] != 0] . sns.set() plt.figure(figsize=(12,6)) nosale_class_cdf = Cdf.from_seq(df_nosale[&#39;BUILDING CLASS CATEGORY&#39;]) class_cdf = Cdf.from_seq(df[&#39;BUILDING CLASS CATEGORY&#39;]) #class_cdf.plot() nosale_class_cdf.plot(label=&#39;Without&#39;) class_cdf.plot(label=&#39;With&#39;) plt.xticks(rotation=90) plt.legend() plt.xlabel(&#39;BUILDING CATEGORY&#39;) plt.ylabel(&#39;CDF&#39;) plt.title(&#39;Properties Transfered with and without cash consideration&#39;) plt.show() . print(df[&#39;SALE PRICE&#39;].min(),df[&#39;SALE PRICE&#39;].max()) . 1 2155000000 . #due to the wid range of sale prices divide through by 1 million to make the graphs more readable df[&#39;SALE PRICE&#39;]=df[&#39;SALE PRICE&#39;]/1000000 . df.groupby(&#39;BOROUGH&#39;)[&#39;SALE PRICE&#39;].describe() . count mean std min 25% 50% 75% max . BOROUGH . 1 13802.0 | 5.120617 | 31.182785 | 0.000001 | 0.685000 | 1.230857 | 2.6000 | 2155.000000 | . 2 5271.0 | 1.124038 | 4.136102 | 0.000001 | 0.259000 | 0.495000 | 0.7100 | 89.000000 | . 3 14955.0 | 1.652125 | 5.610998 | 0.000001 | 0.519485 | 0.810000 | 1.3295 | 150.000000 | . 4 17422.0 | 1.081403 | 6.454264 | 0.000001 | 0.358000 | 0.590000 | 0.8700 | 337.534524 | . 5 5291.0 | 0.628532 | 1.635849 | 0.000001 | 0.395000 | 0.535000 | 0.6750 | 92.725017 | . df_class_category=df.groupby(&#39;BUILDING CLASS CATEGORY&#39;)[&#39;SALE PRICE&#39;].describe() . plt.figure(figsize=(12,6)) sns.barplot(y=&#39;mean&#39;,x=df_class_category.index,data=df_class_category) plt.ylabel(&#39; Sale Price (Million USD)&#39;) plt.title(&#39;Mean Price of Properties Sold&#39;) plt.show() . plt.figure(figsize=(12,6)) sns.barplot(y=&#39;std&#39;,x=df_class_category.index,data=df_class_category) plt.ylabel(&#39;Std (Million USD)&#39;) plt.title(&#39;Standard deviation of Properties sold&#39;) plt.show() . BUILDING CLASS 21 , 43 and 39 have the top mean price and the top 3 standard deviation . df_class_category=df.groupby(&#39;TAX CLASS AT TIME OF SALE&#39;)[&#39;SALE PRICE&#39;].describe() plt.figure(figsize=(12,6)) sns.barplot(y=&#39;mean&#39;,x=df_class_category.index,data=df_class_category) plt.ylabel(&#39; Sale Price (Million USD)&#39;) plt.title(&#39;Mean Price of Properties Sold&#39;) plt.show() . No surprise here . df[&#39;BOROUGH&#39;].dtype . dtype(&#39;int64&#39;) . df[&#39;AGE OF BUILDING&#39;].dtype . dtype(&#39;float64&#39;) . df[&#39;SALE PRICE&#39;].dtype . dtype(&#39;float64&#39;) . df[&#39;TAX CLASS AT PRESENT&#39;].unique() . array([&#39;1&#39;, &#39;2&#39;, &#39;2A&#39;, &#39;2B&#39;, &#39;2C&#39;, &#39;4&#39;, &#39;1C&#39;, nan, &#39;1A&#39;, &#39;1B&#39;, &#39;1D&#39;], dtype=object) . df[&#39;TAX CLASS AT TIME OF SALE&#39;].unique() . array([1, 2, 4]) . df[&#39;SALE PRICE&#39;].describe() . count 56741.000000 mean 2.176078 std 16.196063 min 0.000001 25% 0.441000 50% 0.700000 75% 1.200000 max 2155.000000 Name: SALE PRICE, dtype: float64 . df.BOROUGH=df[&#39;BOROUGH&#39;].astype(float) df[&#39;AGE OF BUILDING&#39;]=df[&#39;AGE OF BUILDING&#39;].astype(float) df[&#39;SALE PRICE&#39;]=df[&#39;SALE PRICE&#39;].astype(float) df[&#39;TAX CLASS AT TIME OF SALE&#39;]=df[&#39;TAX CLASS AT TIME OF SALE&#39;].astype(float) df.BLOCK=df.BLOCK.astype(float) #df[&#39;ZIP CODE&#39;]=df[&#39;ZIP CODE&#39;].astype(object) df[&#39;TOTAL UNITS&#39;]=df[&#39;TOTAL UNITS&#39;].astype(float) . df[[&#39;BOROUGH&#39;,&#39;SALE PRICE&#39;,&#39;AGE OF BUILDING&#39;,&#39;TAX CLASS AT TIME OF SALE&#39;,&#39;ZIP CODE&#39;,&#39;TOTAL UNITS&#39;]].corr(method = &#39;spearman&#39;) . BOROUGH SALE PRICE AGE OF BUILDING TAX CLASS AT TIME OF SALE ZIP CODE TOTAL UNITS . BOROUGH 1.000000 | -0.323644 | -0.086976 | -0.455175 | 0.651377 | -0.014432 | . SALE PRICE -0.323644 | 1.000000 | 0.025073 | 0.155076 | -0.264418 | 0.129570 | . AGE OF BUILDING -0.086976 | 0.025073 | 1.000000 | -0.236822 | 0.093991 | 0.323939 | . TAX CLASS AT TIME OF SALE -0.455175 | 0.155076 | -0.236822 | 1.000000 | -0.333777 | -0.221304 | . ZIP CODE 0.651377 | -0.264418 | 0.093991 | -0.333777 | 1.000000 | 0.109866 | . TOTAL UNITS -0.014432 | 0.129570 | 0.323939 | -0.221304 | 0.109866 | 1.000000 | . cmap = sns.diverging_palette(220, 10, as_cmap=True) . sns.heatmap(df[[&#39;BOROUGH&#39;,&#39;SALE PRICE&#39;,&#39;AGE OF BUILDING&#39;,&#39;TAX CLASS AT TIME OF SALE&#39;,&#39;ZIP CODE&#39;,&#39;TOTAL UNITS&#39;]].corr(method = &#39;spearman&#39;),cmap=cmap , vmax=.3, center=0, square=True, linewidths=.5, cbar_kws={&quot;shrink&quot;: .5}) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fd91a090390&gt; . df.groupby(&#39;TAX CLASS AT PRESENT&#39;)[&#39;BOROUGH&#39;].count() . TAX CLASS AT PRESENT 1 24050 1A 1064 1B 679 1C 110 1D 115 2 23917 2A 1028 2B 344 2C 1674 4 3704 Name: BOROUGH, dtype: int64 . df_nosale.groupby(&#39;TAX CLASS AT PRESENT&#39;)[&#39;BOROUGH&#39;].count() . TAX CLASS AT PRESENT 1 14470 1A 382 1B 577 1C 60 1D 26 2 5731 2A 1082 2B 299 2C 321 4 1625 Name: BOROUGH, dtype: int64 . Zip code cloropleth . zip_code_sale_price=df.groupby(&#39;ZIP CODE&#39;)[[&#39;SALE PRICE&#39;]].mean() . zip_code_sale_price[&#39;STD&#39;]=df.groupby(&#39;ZIP CODE&#39;)[[&#39;SALE PRICE&#39;]].std() . zip_code_sale_price[&#39;ZIPCODE&#39;]=zip_code_sale_price.index . name = np.arange(0,192) print(name) . [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191] . zip_code_sale_price[&#39;index&#39;]=name . zip_code_sale_price.set_index(&#39;index&#39;) . SALE PRICE STD ZIPCODE . index . 0 14.828419 | 122.574711 | 10001.0 | . 1 2.479718 | 6.862115 | 10002.0 | . 2 10.809256 | 24.376703 | 10003.0 | . 3 7.401800 | 28.643842 | 10004.0 | . 4 3.041963 | 18.704545 | 10005.0 | . ... ... | ... | ... | . 187 3.266424 | 8.866739 | 11691.0 | . 188 1.966227 | 4.099102 | 11692.0 | . 189 0.413678 | 0.726488 | 11693.0 | . 190 0.889324 | 1.619908 | 11694.0 | . 191 0.502740 | 0.283611 | 11697.0 | . 192 rows × 3 columns . zip_code_sale_price.head() . SALE PRICE STD ZIPCODE index . ZIP CODE . 10001.0 14.828419 | 122.574711 | 10001.0 | 0 | . 10002.0 2.479718 | 6.862115 | 10002.0 | 1 | . 10003.0 10.809256 | 24.376703 | 10003.0 | 2 | . 10004.0 7.401800 | 28.643842 | 10004.0 | 3 | . 10005.0 3.041963 | 18.704545 | 10005.0 | 4 | . zip_codes=gpd.read_file(&#39;ZIP_CODE_040114/ZIP_CODE_040114.shp&#39;) . zip_codes.head() . ZIPCODE BLDGZIP PO_NAME POPULATION AREA STATE COUNTY ST_FIPS CTY_FIPS URL SHAPE_AREA SHAPE_LEN geometry . 0 11436 | 0 | Jamaica | 18681.0 | 2.269930e+07 | NY | Queens | 36 | 081 | http://www.usps.com/ | 0.0 | 0.0 | POLYGON ((1038098.252 188138.380, 1038141.936 ... | . 1 11213 | 0 | Brooklyn | 62426.0 | 2.963100e+07 | NY | Kings | 36 | 047 | http://www.usps.com/ | 0.0 | 0.0 | POLYGON ((1001613.713 186926.440, 1002314.243 ... | . 2 11212 | 0 | Brooklyn | 83866.0 | 4.197210e+07 | NY | Kings | 36 | 047 | http://www.usps.com/ | 0.0 | 0.0 | POLYGON ((1011174.276 183696.338, 1011373.584 ... | . 3 11225 | 0 | Brooklyn | 56527.0 | 2.369863e+07 | NY | Kings | 36 | 047 | http://www.usps.com/ | 0.0 | 0.0 | POLYGON ((995908.365 183617.613, 996522.848 18... | . 4 11218 | 0 | Brooklyn | 72280.0 | 3.686880e+07 | NY | Kings | 36 | 047 | http://www.usps.com/ | 0.0 | 0.0 | POLYGON ((991997.113 176307.496, 992042.798 17... | . # to avoid value error when merging zip_code_sale_price[&#39;ZIPCODE&#39;]=zip_code_sale_price[&#39;ZIPCODE&#39;].astype(float) zip_codes[&#39;ZIPCODE&#39;]=zip_codes[&#39;ZIPCODE&#39;].astype(float) . zip_codes=pd.merge(zip_codes, zip_code_sale_price, on=&#39;ZIPCODE&#39;) . zip_code_sale_price.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Float64Index: 192 entries, 10001.0 to 11697.0 Data columns (total 4 columns): # Column Non-Null Count Dtype -- -- 0 SALE PRICE 192 non-null float64 1 STD 185 non-null float64 2 ZIPCODE 192 non-null float64 3 index 192 non-null int64 dtypes: float64(3), int64(1) memory usage: 7.5 KB . zip_codes.head() . ZIPCODE BLDGZIP PO_NAME POPULATION AREA STATE COUNTY ST_FIPS CTY_FIPS URL SHAPE_AREA SHAPE_LEN geometry SALE PRICE STD index . 0 11436.0 | 0 | Jamaica | 18681.0 | 2.269930e+07 | NY | Queens | 36 | 081 | http://www.usps.com/ | 0.0 | 0.0 | POLYGON ((1038098.252 188138.380, 1038141.936 ... | 0.455461 | 0.203197 | 186 | . 1 11213.0 | 0 | Brooklyn | 62426.0 | 2.963100e+07 | NY | Kings | 36 | 047 | http://www.usps.com/ | 0.0 | 0.0 | POLYGON ((1001613.713 186926.440, 1002314.243 ... | 1.178842 | 2.220813 | 112 | . 2 11212.0 | 0 | Brooklyn | 83866.0 | 4.197210e+07 | NY | Kings | 36 | 047 | http://www.usps.com/ | 0.0 | 0.0 | POLYGON ((1011174.276 183696.338, 1011373.584 ... | 1.696954 | 3.278119 | 111 | . 3 11225.0 | 0 | Brooklyn | 56527.0 | 2.369863e+07 | NY | Kings | 36 | 047 | http://www.usps.com/ | 0.0 | 0.0 | POLYGON ((995908.365 183617.613, 996522.848 18... | 1.504705 | 2.777401 | 124 | . 4 11218.0 | 0 | Brooklyn | 72280.0 | 3.686880e+07 | NY | Kings | 36 | 047 | http://www.usps.com/ | 0.0 | 0.0 | POLYGON ((991997.113 176307.496, 992042.798 17... | 1.209329 | 1.744624 | 117 | . zip_codes.COUNTY.unique() . array([&#39;Queens&#39;, &#39;Kings&#39;, &#39;Bronx&#39;, &#39;New York&#39;, &#39;Richmond&#39;], dtype=object) . zip_codes[&quot;center&quot;] = zip_codes[&quot;geometry&quot;].centroid zip_codes_points = zip_codes.copy() zip_codes_points.set_geometry(&quot;center&quot;, inplace = True) . zip_codes[&quot;center&quot;] = zip_codes[&quot;geometry&quot;].centroid zip_codes_points = zip_codes.copy() zip_codes_points.set_geometry(&quot;center&quot;, inplace = True) manhattan_points = zip_codes_points[&#39;center&#39;][zip_codes_points[&#39;COUNTY&#39;]==&#39;New York&#39;] queens_points = zip_codes_points[&#39;center&#39;][zip_codes_points[&#39;COUNTY&#39;]==&#39;Queens&#39;] bronxs_points = zip_codes_points[&#39;center&#39;][zip_codes_points[&#39;COUNTY&#39;]==&#39;Bronx&#39;] brooklyn_points = zip_codes_points[&#39;center&#39;][zip_codes_points[&#39;COUNTY&#39;]==&#39;Kings&#39;] staten_points = zip_codes_points[&#39;center&#39;][zip_codes_points[&#39;COUNTY&#39;]==&#39;Richmond&#39;] staten_points.head() . 128 POINT (957586.243 167392.636) 129 POINT (937618.499 169775.902) 131 POINT (945934.791 169127.012) 137 POINT (958123.120 159832.333) 138 POINT (938581.925 156473.794) Name: center, dtype: geometry . def points_to_multipoint(x): &quot;&quot;&quot;&quot;Takes an iterable opbject with shapley points and turns it into a multipoint opject&quot;&quot;&quot; y=[] for point in x: y.append(point) y=MultiPoint(y) return y #get centroid of multipoints manhattan=points_to_multipoint(manhattan_points).centroid queens=points_to_multipoint(queens_points).centroid bronxs=points_to_multipoint(bronxs_points).centroid brooklyn=points_to_multipoint(brooklyn_points).centroid staten=points_to_multipoint(staten_points).centroid centroids=[manhattan,queens,bronxs,brooklyn,staten] lables=[&#39;Manhattan&#39;,&#39;Queens&#39;,&#39;Bronx&#39;,&#39;Brooklyn&#39;,&#39;Staten Island&#39;] . zip_codes[&#39;SALE PRICE&#39;]=zip_codes[&#39;SALE PRICE&#39;] . gdf=gpd.GeoDataFrame(zip_codes, geometry=zip_codes.geometry) ax=(gdf.plot(column=&#39;SALE PRICE&#39;,scheme=&#39;Percentiles&#39;, cmap=&#39;cool&#39;,figsize=(20,20),legend=True)) ax.set_title(&#39;Mean Property Price by Zipcode (Million USD)&#39;,fontsize=30) ax.set_axis_off() #gdf.to_file(&#39;New York zipcodes base.shp&#39;) texts=[] for x, y, label in zip(centroids,centroids,lables): texts.append(plt.text(x.x, y.y, label, fontsize = 23)) plt.savefig(&#39;NYC.png&#39;) .",
            "url": "https://smolgeat.github.io/blog/2020/09/02/NYC_EDA.html",
            "relUrl": "/2020/09/02/NYC_EDA.html",
            "date": " • Sep 2, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Korea > Europe West > North America is it true?",
            "content": "Introduction . When it comes to esports League of Legends is pre-eminent title. Its world championships have booked stadiums such as Staples Center in the USA, Bird&#39;s Nest in China and the seoul world cup stadium in Korea. . During world champions server pride runs high in tiwtch chat you&#39;ll frequently see fans cheering for teams from their server or trash talking others. . KR &gt; EUW &gt; NA can be seen in stream chats and on twitter. . On the world stage Korean temas have established themselves as a dominant region first or second place in 6 of the 9 world championships. In the last two years no Korean team has made it to the finals while European teams have placed second both times. Just last year(2019) G2 from Europe beat SKT from Korea 3 games to 1 . This is significant because SKT is arguably the most dominant league of legends franchise. . North America while being the birthplace of league of legends has not been able to perform on the international stage . I thought it would be interesting to see how the top solo queue players of each region match up. . At the top of the ranked ladder for every region are three tiers in descending order challenger grandmaster and master. These top tiers have a player cap so they are an accurate representation fo who is at the top of their game. . The Europe West, North America and Korea servers have player caps of 300 for challenger 700 for grandmaster and masters has 4000. . I gathered data on all top tier players across the three servers using the riot games api. I created a notebook template located in this repository. . At the time this list was retrieved there were 5231 players across the three servers . There were a couple questions I wanted answered . What does it take to reach the top? . Which has the region the most players? . Who plays the most games? . How do the individual tier win rates compare across regions ? . What is the most popular role in each region? . What is the win rate of each role? . What does it take to reach the top . Most players have around 200 games +- 100 | Most win rates above 50%. | More games played the more win rate trends toward 50% | . What region has the most players . Region Tier Players . 0 Korea | CHALLENGER | 300 | . 1 Korea | GRANDMASTER | 700 | . 2 Korea | MASTER | 977 | . 3 Korea | Total | 1977 | . 4 Europe West | CHALLENGER | 300 | . 5 Europe West | GRANDMASTER | 700 | . 6 Europe West | MASTER | 1174 | . 7 Europe West | Total | 2174 | . 8 North America | CHALLENGER | 300 | . 9 North America | GRANDMASTER | 699 | . 10 North America | MASTER | 81 | . 11 North America | Total | 1080 | . Challenger is full across all servers | At 699 NA only region to have under 700 grandmaster players | EUW and KR have over 10 times as many masters players as NA | Europe has the most players | . Who plays the most games . The general trend across all regions is for challengers to play the most games followed by grandmasters and masters | Koreans had the highest average games played followed by Europeans | . How do individual tier win rates vary across regions . Korean masters players had the highest variance in win rate | North America is the only region where masters have the highest average win rate. In the other regions challengers have the highest average win rate | . What is the most popular role . Bottom is the most popular role across all servers | Both Europeans and Koreans have jungle as their second favourite role while Americans prefer mid lane | Fourth favourite for all regions is Top | Support is the least favourite role and Korea is the only server with any support players | . What is the win rate of each role . North American players have a higher win rate across the board this could be because they play less games | Korean supports have the highest win rates on their server and second highest win rate overall | Junglers would have the highest win rates in each server if supports were excluded | Mid laners have the second highest win rate in North america and Europe but the lowest in Korea | . Conclusions . Koreans play the most league of legends while Europe has the most players. | North America seems to have alot of casual players this can be seen from the low number of games played, the incomplete grandmaster tier and the almost empty master tier | Jungle is probably the best role for climbing the ranked ladder ### Ranking North American server is a casual place so I&#39;ll rank them third Even though Koreans play more games than Europeans they have higher win rates. Korea is also the most well rounded server. I believe this merits Europe West being second and Korea being first | . TLDR . Korea &gt; Europe West &gt; North America .",
            "url": "https://smolgeat.github.io/blog/data-analysis/league-of-legends/esports/2020/03/26/master-to-challenger-players-LOL.html",
            "relUrl": "/data-analysis/league-of-legends/esports/2020/03/26/master-to-challenger-players-LOL.html",
            "date": " • Mar 26, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Solving Series Parallel Resistive Networks With C++",
            "content": "A couple years ago I took a class that showed how programming can be used to solve some engineering questions that involve math. For the final project was tasked with creating a program to solve resistive networks. . Some background information . What is resistance, current and voltage . For the uninitiated resistance current and voltage can be considered the foundation of all things electrical. . “The unit of electric resistance is the ohm (Ω) where one Ohm is one volt per ampere. It is defined as the resistance between two points in a conductor when a constant electric potential of one volt applied at the two points produces a current flow of one ampere in the conductor. Thus resistance, in ohms: . . where V is the potential difference across the two points in volts and I is the current flowing between the two points in amperes.”(Bird 2007) . What exactly does the above passage mean . To explain I will use the “water hose” analogy. Imagine a hose carrying water connected to a pump, the hose is the conductor, the flowing water is your current, the pump moving the water through the hose is the voltage and anything impeding the flow of water is resistance. . What is a resistive network . A resistive network is a circuit of resistors(which are simply electrical devices that impart resistance to a circuit) connected together. If a voltage is applied across the circuit there should be a current flowing through the circuit. . Series configuration This means the resistors are connected end to end. Parallel configuration This means the resistors have the same start and end point. Series parallel Combination of series and configuration. . Effect of configuration on total resistance . In series the total resistance is simply the sum of the resistance of the resistors: The total resistance RT of some resistors in series RS1,RS2,RSN is . RT= RS1+RS2+RSN . In parallel the total resistance is the The total resistance RT of some resistors in parallel RP1,RP2,RPN is . If there are just two resistors in parallel the total resistance is simply the product of both resistors divided by the sum of both resistors . Now onto the problem . Analyse the series parallel resistive dc circuit below to produce the total circuit resistance and the total circuit current. The user of the program should be requested for the source voltage and the values of the resistors. The user should also be asked for the number of series and parallel resistors in the circuit. . . Solving the problem . #include &lt;iostream&gt; double prodsum(double a,double b); int main() { float v = 0;//voltage int n = 0;//number of resistors in series and parallel double rt = 0;//total resistance int count=0; std::cout&lt;&lt;&quot;Enter the voltage of the circuit: &quot; ; cin&gt;&gt;v; std::cout&lt;&lt;&quot;Enter number of series and parallel resistors: &quot;&lt;&lt; std::endl; cin&gt;&gt;n ; . There are three assumptions resistance of the resistors cannot be 0 or a negative value and there must be at least one pair of resistors so there are two loops that force the user to have inputs in line with these assumptions. . //Error catching while loop while (n &lt;= 0) { std::cout&lt;&lt; &quot;Error must have at least one resistor&quot;&lt;&lt; std::endl; std::cout&lt;&lt;&quot;Enter number of series and parallel resistors: &quot;; cin&gt;&gt;n ; } double rs[n]= {}; double rp[n]={}; // While loop to enter values for resistor while (count&lt;n) { std::cout&lt;&lt;&quot;Enter RP&quot;&lt;&lt;count+1&lt;&lt; &quot;: &quot; ; cin&gt;&gt;rp[count]; //Error catching while loop while (rp[count]&lt;=0) { std::cout&lt;&lt;&quot;Error value of resistor must be greater than 0&quot;&lt;&lt;std::endl ; std::cout&lt;&lt;&quot;Enter RP&quot;&lt;&lt;count+1&lt;&lt; &quot;: &quot; ; cin&gt;&gt;rp[count]; } std::cout&lt;&lt;&quot;Enter RS&quot;&lt;&lt;count+1&lt;&lt; &quot;: &quot; ; cin&gt;&gt;rs[count]; //Error catching while loop while (rs[count]&lt;=0) { std::cout&lt;&lt;&quot;Error value of resistor must be greater than 0&quot;&lt;&lt;std::endl ; std::cout&lt;&lt;&quot;Enter RS&quot;&lt;&lt;count+1&lt;&lt; &quot;: &quot; ; cin&gt;&gt;rs[count]; } count+=1; } . Resistance is calculated starting from the nth pair of resistors Since the nth pair are in series with each other they are added together to get rt . //rt is the total calculated resistance rt=rp[n-1] + rs[n-1]; //starts at n-2 because the total of the n-1 element resistors have already been computed int runs = n-2; . Calculates remaining resistance using product sum rule using rt and rpn-1. Then adds the rt and rs-1 . while (runs&gt;=0) { rt=prodsum(rt,rp[runs]); rt+=rs[runs]; runs-=1; } . calculate total current by . double i = v/rt; //output total resistance and current std::cout&lt;&lt;&quot;The total resistance is: &quot;&lt;&lt; rt&lt;&lt;std::endl; std::cout &lt;&lt;&quot;The total current is: &quot;&lt;&lt;i ; return 0; } . Uses product sum rule, using rt and resistor in parallel . double prodsum(double a,double b) { double c=(a*b)/(a+b); return c ; } . Summary . The approach taken when solving the resistance was simply to use the laws/rules governing resistors in series and parallel and work from the opposite end of the circuit from the voltage source. This was possible since the resistors would come in pairs RPn and RSn so the layout of the circuit could be predicted. First an end resistance was gotten by adding RPn and RSn which were in series. Then the total resistance of the end resistance and the next resistance in parallel RPn-1 would be gotten using the product sum rule Rt=Ra*Rb/(Ra+Rb). Then the new end resistance would be added to RSn-1 to get a new end resistance since the total resistance of resistors in series is the sum of their individual resistance. This process was looped until only the end resistor would be left, this resistance value would be the total resistance of the circuit. The voltage is then divided by this value to get the total circuit current. There are three assumptions resistance of the resistors cannot be 0 or a negative value and there must be at least one pair of resistors so there are two loops that force the user to have inputs in line with these assumptions. An issue is that the user must enter a number if at any point where a number is expected and the user inputs a non numeric character the program will be stuck in an infinite loop. .",
            "url": "https://smolgeat.github.io/blog/c++/engineering/2020/01/31/SolvingResistiveNetworks.html",
            "relUrl": "/c++/engineering/2020/01/31/SolvingResistiveNetworks.html",
            "date": " • Jan 31, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Portfolio",
          "content": "Visualizations . .",
          "url": "https://smolgeat.github.io/blog/portfolio/",
          "relUrl": "/portfolio/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "About Me",
          "content": "Under Construction .",
          "url": "https://smolgeat.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}