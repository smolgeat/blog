{
  
    
        "post0": {
            "title": "Korea > Europe West > North America is it true?",
            "content": "Introduction . When it comes to esports League of Legends is pre-eminent title. Its world championships have booked stadiums such as Staples Center in the USA, Bird&#39;s Nest in China and the seoul world cup stadium in Korea. . During world champions server pride runs high in tiwtch chat you&#39;ll frequently see fans cheering for teams from their server or trash talking others. . KR &gt; EUW &gt; NA can be seen in stream chats and on twitter. . On the world stage Korean temas have established themselves as a dominant region first or second place in 6 of the 9 world championships. In the last two years no Korean team has made it to the finals while European teams have placed second both times. Just last year(2019) G2 from Europe beat SKT from Korea 3 games to 1 . This is significant because SKT is arguably the most dominant league of legends franchise. . North America while being the birthplace of league of legends has not been able to perform on the international stage . I thought it would be interesting to see how the top solo queue players of each region match up. . At the top of the ranked ladder for every region are three tiers in descending order challenger grandmaster and master. These top tiers have a player cap so they are an accurate representation fo who is at the top of their game. . The Europe West, North America and Korea servers have player caps of 300 for challenger 700 for grandmaster and masters has 4000. . I gathered data on all top tier players across the three servers using the riot games api. I created a notebook template located in this repository. . At the time this list was retrieved there were 5231 players across the three servers . There were a couple questions I wanted answered . What does it take to reach the top? . Which has the region the most players? . Who plays the most games? . How do the individual tier win rates compare across regions ? . What is the most popular role in each region? . What is the win rate of each role? . What does it take to reach the top . Most players have around 200 games +- 100 | Most win rates above 50%. | More games played the more win rate trends toward 50% | . What region has the most players . Region Tier Players . 0 Korea | CHALLENGER | 300 | . 1 Korea | GRANDMASTER | 700 | . 2 Korea | MASTER | 977 | . 3 Korea | Total | 1977 | . 4 Europe West | CHALLENGER | 300 | . 5 Europe West | GRANDMASTER | 700 | . 6 Europe West | MASTER | 1174 | . 7 Europe West | Total | 2174 | . 8 North America | CHALLENGER | 300 | . 9 North America | GRANDMASTER | 699 | . 10 North America | MASTER | 81 | . 11 North America | Total | 1080 | . Challenger is full across all servers | At 699 NA only region to have under 700 grandmaster players | EUW and KR have over 10 times as many masters players as NA | Europe has the most players | . Who plays the most games . The general trend across all regions is for challengers to play the most games followed by grandmasters and masters | Koreans had the highest average games played followed by Europeans | . How do individual tier win rates vary across regions . Korean masters players had the highest variance in win rate | North America is the only region where masters have the highest average win rate. In the other regions challengers have the highest average win rate | . What is the most popular role . Bottom is the most popular role across all servers | Both Europeans and Koreans have jungle as their second favourite role while Americans prefer mid lane | Fourth favourite for all regions is Top | Support is the least favourite role and Korea is the only server with any support players | . What is the win rate of each role . North American players have a higher win rate across the board this could be because they play less games | Korean supports have the highest win rates on their server and second highest win rate overall | Junglers would have the highest win rates in each server if supports were excluded | Mid laners have the second highest win rate in North america and Europe but the lowest in Korea | . Conclusions . Koreans play the most league of legends while Europe has the most players. | North America seems to have alot of casual players this can be seen from the low number of games played, the incomplete grandmaster tier and the almost empty master tier | Jungle is probably the best role for climbing the ranked ladder ### Ranking North American server is a casual place so I&#39;ll rank them third Even though Koreans play more games than Europeans they have higher win rates. Korea is also the most well rounded server. I believe this merits Europe West being second and Korea being first | . TLDR . Korea &gt; Europe West &gt; North America .",
            "url": "https://smolgeat.github.io/blog/data-analysis/league-of-legends/esports/2020/03/26/master-to-challenger-players-LOL.html",
            "relUrl": "/data-analysis/league-of-legends/esports/2020/03/26/master-to-challenger-players-LOL.html",
            "date": " • Mar 26, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Solving Series Parallel Resistive Networks With C++",
            "content": "A couple years ago I took a class that showed how programming can be used to solve some engineering questions that involve math. For the final project was tasked with creating a program to solve resistive networks. . Some background information . What is resistance, current and voltage . For the uninitiated resistance current and voltage can be considered the foundation of all things electrical. . “The unit of electric resistance is the ohm (Ω) where one Ohm is one volt per ampere. It is defined as the resistance between two points in a conductor when a constant electric potential of one volt applied at the two points produces a current flow of one ampere in the conductor. Thus resistance, in ohms: . . where V is the potential difference across the two points in volts and I is the current flowing between the two points in amperes.”(Bird 2007) . What exactly does the above passage mean . To explain I will use the “water hose” analogy. Imagine a hose carrying water connected to a pump, the hose is the conductor, the flowing water is your current, the pump moving the water through the hose is the voltage and anything impeding the flow of water is resistance. . What is a resistive network . A resistive network is a circuit of resistors(which are simply electrical devices that impart resistance to a circuit) connected together. If a voltage is applied across the circuit there should be a current flowing through the circuit. . Series configuration This means the resistors are connected end to end. Parallel configuration This means the resistors have the same start and end point. Series parallel Combination of series and configuration. . Effect of configuration on total resistance . In series the total resistance is simply the sum of the resistance of the resistors: The total resistance RT of some resistors in series RS1,RS2,RSN is . RT= RS1+RS2+RSN . In parallel the total resistance is the The total resistance RT of some resistors in parallel RP1,RP2,RPN is . If there are just two resistors in parallel the total resistance is simply the product of both resistors divided by the sum of both resistors . Now onto the problem . Analyse the series parallel resistive dc circuit below to produce the total circuit resistance and the total circuit current. The user of the program should be requested for the source voltage and the values of the resistors. The user should also be asked for the number of series and parallel resistors in the circuit. . . Solving the problem . #include &lt;iostream&gt; double prodsum(double a,double b); int main() { float v = 0;//voltage int n = 0;//number of resistors in series and parallel double rt = 0;//total resistance int count=0; std::cout&lt;&lt;&quot;Enter the voltage of the circuit: &quot; ; cin&gt;&gt;v; std::cout&lt;&lt;&quot;Enter number of series and parallel resistors: &quot;&lt;&lt; std::endl; cin&gt;&gt;n ; . There are three assumptions resistance of the resistors cannot be 0 or a negative value and there must be at least one pair of resistors so there are two loops that force the user to have inputs in line with these assumptions. . //Error catching while loop while (n &lt;= 0) { std::cout&lt;&lt; &quot;Error must have at least one resistor&quot;&lt;&lt; std::endl; std::cout&lt;&lt;&quot;Enter number of series and parallel resistors: &quot;; cin&gt;&gt;n ; } double rs[n]= {}; double rp[n]={}; // While loop to enter values for resistor while (count&lt;n) { std::cout&lt;&lt;&quot;Enter RP&quot;&lt;&lt;count+1&lt;&lt; &quot;: &quot; ; cin&gt;&gt;rp[count]; //Error catching while loop while (rp[count]&lt;=0) { std::cout&lt;&lt;&quot;Error value of resistor must be greater than 0&quot;&lt;&lt;std::endl ; std::cout&lt;&lt;&quot;Enter RP&quot;&lt;&lt;count+1&lt;&lt; &quot;: &quot; ; cin&gt;&gt;rp[count]; } std::cout&lt;&lt;&quot;Enter RS&quot;&lt;&lt;count+1&lt;&lt; &quot;: &quot; ; cin&gt;&gt;rs[count]; //Error catching while loop while (rs[count]&lt;=0) { std::cout&lt;&lt;&quot;Error value of resistor must be greater than 0&quot;&lt;&lt;std::endl ; std::cout&lt;&lt;&quot;Enter RS&quot;&lt;&lt;count+1&lt;&lt; &quot;: &quot; ; cin&gt;&gt;rs[count]; } count+=1; } . Resistance is calculated starting from the nth pair of resistors Since the nth pair are in series with each other they are added together to get rt . //rt is the total calculated resistance rt=rp[n-1] + rs[n-1]; //starts at n-2 because the total of the n-1 element resistors have already been computed int runs = n-2; . Calculates remaining resistance using product sum rule using rt and rpn-1. Then adds the rt and rs-1 . while (runs&gt;=0) { rt=prodsum(rt,rp[runs]); rt+=rs[runs]; runs-=1; } . calculate total current by . double i = v/rt; //output total resistance and current std::cout&lt;&lt;&quot;The total resistance is: &quot;&lt;&lt; rt&lt;&lt;std::endl; std::cout &lt;&lt;&quot;The total current is: &quot;&lt;&lt;i ; return 0; } . Uses product sum rule, using rt and resistor in parallel . double prodsum(double a,double b) { double c=(a*b)/(a+b); return c ; } . Summary . The approach taken when solving the resistance was simply to use the laws/rules governing resistors in series and parallel and work from the opposite end of the circuit from the voltage source. This was possible since the resistors would come in pairs RPn and RSn so the layout of the circuit could be predicted. First an end resistance was gotten by adding RPn and RSn which were in series. Then the total resistance of the end resistance and the next resistance in parallel RPn-1 would be gotten using the product sum rule Rt=Ra*Rb/(Ra+Rb). Then the new end resistance would be added to RSn-1 to get a new end resistance since the total resistance of resistors in series is the sum of their individual resistance. This process was looped until only the end resistor would be left, this resistance value would be the total resistance of the circuit. The voltage is then divided by this value to get the total circuit current. There are three assumptions resistance of the resistors cannot be 0 or a negative value and there must be at least one pair of resistors so there are two loops that force the user to have inputs in line with these assumptions. An issue is that the user must enter a number if at any point where a number is expected and the user inputs a non numeric character the program will be stuck in an infinite loop. .",
            "url": "https://smolgeat.github.io/blog/c++/engineering/2020/01/31/SolvingResistiveNetworks.html",
            "relUrl": "/c++/engineering/2020/01/31/SolvingResistiveNetworks.html",
            "date": " • Jan 31, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://smolgeat.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}